const mongoose = require('mongoose');
const db = mongoose.connection;

/* const opts = {
  db: {
    native_parser: true,
    retryMiliSeconds: 3000
  },
  replset: {
    auto_reconnect: true,
    poolSize: 8,
    socketOptions: {
      keepAlive: 500,
      connectTimeoutMS: 20000
    },
    readPreference: "secondaryPreferred"
  },
  server: {
    auto_reconnect: true,
    poolSize: 8,
    socketOptions: {
      keepAlive: 500,
      connectTimeoutMS: 20000
    },
    readPreference: "secondaryPreferred"
  }
}; */
const opts = {
  useMongoClient: true,
  native_parser: true,
  auth: {
    user: 'admin',
    password: 'root'
  },
  readPreference: 'primaryPreferred',
  autoReconnect: true,
  poolSize: 8,
  keepAlive: 500,
  connectTimeoutMS: 20000,
  replicaSet: '',
  w: 'majority',
  wtimeout: 2000
}

function getConnStr(mongo) {
  // let uriStr = "mongodb://" + mongo.replicas.join(",") + '/' + mongo.database;
  let uriStr = `mongodb://${mongo.username}:${mongo.password}@${mongo.replicas.join(",")}/${mongo.database}`;
  return uriStr;
}

function connect(mongo, logger, cb) {
  let options = mongo.options || opts;
  let uriStr = getConnStr(mongo);
  logger.log(uriStr);
  mongoose.connect(uriStr, options, function (err) {
    if (typeof (cb) === "function") {
      cb(err);
    }
    if (err) {
      logger.error('error in mongo db connection', err);
    }
  });

  db.on('connecting', function () {
    logger.log('connecting to Mongo DB...');
  });
  db.on('error', function (error) {
    logger.error('error in mongo db connection: ' + error);
  });
  db.on('connected', function () {
    logger.log('mongo db connected!');
  });
  db.once('open', function () {
    logger.log('mongo db connection opened!');
  });
  db.on('reconnected', function () {
    logger.log('mongo db reconnected!');
  });
  db.on('disconnected', function () {
    logger.error('mongo db disconnected!');
  });

  return mongoose;
}


function createConnection(mongo, logger, cb) {
  let options = mongo.options || mongo || opts;
  let uriStr = getConnStr(mongo);
  logger.log(uriStr);
  return mongoose.createConnection(
    uriStr,
    options,
    function (err) {
      if (typeof (cb) === "function") {
        return cb(err, mongoose);
      }
    });
}

module.exports = {
  getConnStr: getConnStr,
  connect: connect,
  createConnection: createConnection
}