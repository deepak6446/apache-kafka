var mongoose = require('mongoose');
var crypto = require('crypto');
var Schema = mongoose.Schema;
require('./bills');
var Bills = mongoose.model('Bill');

var UserStreamSchema = new Schema({
    uid: {
        type: String
    },
    created_at: {
        type: Date
    },
    updated_at: {
        type: Date
    },
    user_uid: {
        type: String
    },
    title: {
        type: String
    },
    deleted_at: {
        type: Date,
        default: null
    },
    pending_view: {
        type: Boolean,
        default: false
    },
    type: {
        type: String
    },
    metadata: {
        type: Schema.Types.Mixed
    },
    lower_case: {
        type: String
    },
    billRef: {
        type: Schema.Types.ObjectId,
        ref: 'Bill'
    },
    project_uid: {
        type: String
    },
    org_uid: {
        type: String
    },
    env_uid: {
        type: String
    }
});


UserStreamSchema.pre('save', function(next) {
    var id = 'strm' + crypto.randomBytes(11).toString('hex');
    this.uid = id;
    //this.billRef = mongoose.Types.ObjectId(this.billRef);
    this.created_at = this.updated_at = new Date();
    this.pending_view = true;
    next();
});

UserStreamSchema.statics = {
    pushNotification: function(user, data) {
        //Create user stream object
        var notification = {
            "user_uid": user.uid,
            "title": data.title,
            "lower_case": data.title.toLowerCase(),
            "metadata": data.metadata,
            "type": data.type
        };
        if (notification.type == "flow-execution") {
            notification.lower_case = notification.metadata.flow_name.toLowerCase();
        }
        if (data.billRef) {
            notification.billRef = data.billRef;
        }
        this.create(notification, function(err, document) {
            if (err) {
                logger.warn('error while creating notification doc on mongo ');
                logger.error(err);
                return err;
            }
            if (document) {
                if (typeof document.toJSON === "function") {
                    document = document.toJSON();
                }
                notification.uid = document.uid
            }
            if (notification.type == "flow-execution" && !data.billRef) {
                Bills.findOne({
                    "_id": notification.billRef
                }, function(err, _bill) {
                    notification.billRef = _bill;
                    global.uxPubnub.pubnub.publish({
                        channel: user.uid,
                        message: {
                            id: 'notification',
                            data: notification
                        },
                        callback: function(obj) {
                            logger.debug('user notification sent via pubnub');
                            logger.debug(JSON.stringify(obj));
                        },
                        error: function(err) {
                            logger.warn('error while sending user notification via pubnub');
                            logger.error(err);
                        }
                    });
                });
            } else {
                global.uxPubnub.pubnub.publish({
                    channel: user.uid,
                    message: {
                        id: 'notification',
                        data: notification
                    },
                    callback: function(obj) {
                        logger.debug('notification sent via pubnub');
                        logger.debug(JSON.stringify(obj));
                    },
                    error: function(err) {
                        logger.warn('error while sending user notification via pubnub');
                        logger.error(err);
                    }
                });
            }
        });
    }
};

mongoose.model('UserStream', UserStreamSchema);
module.exports = ['UserStream', UserStreamSchema]